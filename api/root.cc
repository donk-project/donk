// Generated by Donk Transpiler. Changes may be overwritten.
// Template:    transformer_definition_cc.tmpl
// Filename:    root.cc
#include "donk/api/root.h"

#include <experimental/coroutine>
#include <random>
#include <string>

#include "donk/core/iota.h"
#include "donk/core/procs.h"
#include "donk/mapping/map_view.h"
#include "spdlog/spdlog.h"

namespace donk::api {

donk::running_proc CRASH(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/CRASH");
}

donk::running_proc REGEX_QUOTE(donk::proc_ctxt_t& ctxt,
                               donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/REGEX_QUOTE");
}

donk::running_proc REGEX_QUOTE_REPLACEMENT(donk::proc_ctxt_t& ctxt,
                                           donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/REGEX_QUOTE_REPLACEMENT");
}

donk::running_proc _dm_db_close(donk::proc_ctxt_t& ctxt,
                                donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/_dm_db_close");
}

donk::running_proc _dm_db_columns(donk::proc_ctxt_t& ctxt,
                                  donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/_dm_db_columns");
}

donk::running_proc _dm_db_connect(donk::proc_ctxt_t& ctxt,
                                  donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/_dm_db_connect");
}

donk::running_proc _dm_db_error_msg(donk::proc_ctxt_t& ctxt,
                                    donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/_dm_db_error_msg");
}

donk::running_proc _dm_db_execute(donk::proc_ctxt_t& ctxt,
                                  donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/_dm_db_execute");
}

donk::running_proc _dm_db_is_connected(donk::proc_ctxt_t& ctxt,
                                       donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/_dm_db_is_connected");
}

donk::running_proc _dm_db_new_con(donk::proc_ctxt_t& ctxt,
                                  donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/_dm_db_new_con");
}

donk::running_proc _dm_db_new_query(donk::proc_ctxt_t& ctxt,
                                    donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/_dm_db_new_query");
}

donk::running_proc _dm_db_next_row(donk::proc_ctxt_t& ctxt,
                                   donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/_dm_db_next_row");
}

donk::running_proc _dm_db_quote(donk::proc_ctxt_t& ctxt,
                                donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/_dm_db_quote");
}

donk::running_proc _dm_db_row_count(donk::proc_ctxt_t& ctxt,
                                    donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/_dm_db_row_count");
}

donk::running_proc _dm_db_rows_affected(donk::proc_ctxt_t& ctxt,
                                        donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/_dm_db_rows_affected");
}

donk::running_proc abs(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/abs");
}

donk::running_proc addtext(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/addtext");
}

donk::running_proc alert(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/alert");
}

donk::running_proc animate(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/animate");
}

donk::running_proc arccos(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/arccos");
}

donk::running_proc arcsin(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/arcsin");
}

donk::running_proc arctan(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/arctan");
}

donk::running_proc arglist(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/arglist");
}

donk::running_proc ascii2text(donk::proc_ctxt_t& ctxt,
                              donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/ascii2text");
}

donk::running_proc block(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/block");
}

donk::running_proc bounds(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/bounds");
}

donk::running_proc bounds_dist(donk::proc_ctxt_t& ctxt,
                               donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/bounds_dist");
}

donk::running_proc browse(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/browse");
}

donk::running_proc browse_rsc(donk::proc_ctxt_t& ctxt,
                              donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/browse_rsc");
}

donk::running_proc ckey(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/ckey");
}

donk::running_proc ckeyEx(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/ckeyEx");
}

donk::running_proc clamp(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/clamp");
}

donk::running_proc cmptext(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/cmptext");
}

donk::running_proc cmptextEx(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/cmptextEx");
}

donk::running_proc copytext(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/copytext");
}

donk::running_proc copytext_char(donk::proc_ctxt_t& ctxt,
                                 donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/copytext_char");
}

donk::running_proc cos(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/cos");
}

donk::running_proc fcopy(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/fcopy");
}

donk::running_proc fcopy_rsc(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/fcopy_rsc");
}

donk::running_proc fdel(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/fdel");
}

donk::running_proc fexists(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/fexists");
}

donk::running_proc file(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/file");
}

donk::running_proc file2text(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/file2text");
}

donk::running_proc filter(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/filter");
}

donk::running_proc findlasttext(donk::proc_ctxt_t& ctxt,
                                donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/findlasttext");
}

donk::running_proc findlasttextEx(donk::proc_ctxt_t& ctxt,
                                  donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/findlasttextEx");
}

donk::running_proc findlasttextEx_char(donk::proc_ctxt_t& ctxt,
                                       donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/findlasttextEx_char");
}

donk::running_proc findlasttext_char(donk::proc_ctxt_t& ctxt,
                                     donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/findlasttext_char");
}

donk::running_proc findtext(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/findtext");
}

donk::running_proc findtextEx(donk::proc_ctxt_t& ctxt,
                              donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/findtextEx");
}

donk::running_proc findtextEx_char(donk::proc_ctxt_t& ctxt,
                                   donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/findtextEx_char");
}

donk::running_proc findtext_char(donk::proc_ctxt_t& ctxt,
                                 donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/findtext_char");
}

donk::running_proc flick(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/flick");
}

donk::running_proc flist(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/flist");
}

donk::running_proc ftp(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/ftp");
}

donk::running_proc generator(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/generator");
}

donk::running_proc get_dir(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/get_dir");
}

donk::running_proc get_dist(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/get_dist");
}

donk::running_proc get_step(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/get_step");
}

donk::running_proc get_step_away(donk::proc_ctxt_t& ctxt,
                                 donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/get_step_away");
}

donk::running_proc get_step_rand(donk::proc_ctxt_t& ctxt,
                                 donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/get_step_rand");
}

donk::running_proc get_step_to(donk::proc_ctxt_t& ctxt,
                               donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/get_step_to");
}

donk::running_proc get_step_towards(donk::proc_ctxt_t& ctxt,
                                    donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/get_step_towards");
}

donk::running_proc gradient(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/gradient");
}

donk::running_proc hascall(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/hascall");
}

donk::running_proc hearers(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/hearers");
}

donk::running_proc html_decode(donk::proc_ctxt_t& ctxt,
                               donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/html_decode");
}

donk::running_proc html_encode(donk::proc_ctxt_t& ctxt,
                               donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/html_encode");
}

donk::running_proc icon_(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/icon");
}

donk::running_proc icon_states(donk::proc_ctxt_t& ctxt,
                               donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/icon_states");
}

donk::running_proc image_(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/image");
}

donk::running_proc initial(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/initial");
}

donk::running_proc input(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/input");
}

donk::running_proc isarea(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/isarea");
}

donk::running_proc isfile(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/isfile");
}

donk::running_proc isicon(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/isicon");
}

donk::running_proc islist(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/islist");
}

donk::running_proc isloc(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/isloc");
}

donk::running_proc ismob(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/ismob");
}

donk::running_proc ismovable(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/ismovable");
}

donk::running_proc isnull(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/isnull");
}

donk::running_proc isnum(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/isnum");
}

donk::running_proc isobj(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/isobj");
}

donk::running_proc ispath(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/ispath");
}

donk::running_proc issaved(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/issaved");
}

donk::running_proc istext(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/istext");
}

donk::running_proc isturf(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/isturf");
}

donk::running_proc istype(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/istype");
}

donk::running_proc jointext(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/jointext");
}

donk::running_proc json_decode(donk::proc_ctxt_t& ctxt,
                               donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/json_decode");
}

donk::running_proc json_encode(donk::proc_ctxt_t& ctxt,
                               donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/json_encode");
}

donk::running_proc length(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/length");
}

donk::running_proc length_char(donk::proc_ctxt_t& ctxt,
                               donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/length_char");
}

donk::running_proc lentext(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/lentext");
}

donk::running_proc link(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/link");
}

donk::running_proc list_(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/list");
}

donk::running_proc list2params(donk::proc_ctxt_t& ctxt,
                               donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/list2params");
}

donk::running_proc load_resource(donk::proc_ctxt_t& ctxt,
                                 donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/load_resource");
}

donk::running_proc locate(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  auto x = args.v(0)->get_int();
  auto y = args.v(1)->get_int();
  auto z = args.v(2)->get_int();
  auto map_tile = ctxt.map()->index(x, y, z);
  if (map_tile == nullptr) {
    spdlog::critical("/locate has null map_tile at {} {} {}", x, y, z);
  }
  auto turf = map_tile->turf();
  if (!turf) {
    spdlog::critical("/locate has null turf at {} {} {}", x, y, z);
  }
  ctxt.Result(turf);
  co_return;
}

donk::running_proc log(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/log");
}

donk::running_proc lowertext(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/lowertext");
}

donk::running_proc matrix_(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/matrix");
}

donk::running_proc max(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/max");
}

donk::running_proc md5(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/md5");
}

donk::running_proc min(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/min");
}

donk::running_proc missile(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/missile");
}

donk::running_proc newlist(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/newlist");
}

donk::running_proc nonspantext(donk::proc_ctxt_t& ctxt,
                               donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/nonspantext");
}

donk::running_proc nonspantext_char(donk::proc_ctxt_t& ctxt,
                                    donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/nonspantext_char");
}

donk::running_proc num2text(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/num2text");
}

donk::running_proc obounds(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/obounds");
}

donk::running_proc ohearers(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/ohearers");
}

donk::running_proc orange(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/orange");
}

donk::running_proc output(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/output");
}

donk::running_proc oview(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/oview");
}

donk::running_proc oviewers(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/oviewers");
}

donk::running_proc params2list(donk::proc_ctxt_t& ctxt,
                               donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/params2list");
}

donk::running_proc pick(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/pick");
}

donk::running_proc prob(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/prob");
}

donk::running_proc rand(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  spdlog::warn("draft stub call: rand");
  static std::random_device rd;
  static std::mt19937 rng{rd()};
  if (args.size() == 2) {
    ctxt.result()->data_.emplace<int>(std::uniform_int_distribution<int>(
        args.v(0)->get_int(), args.v(1)->get_int())(rng));
  }
  co_return;
}

donk::running_proc rand_seed(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/rand_seed");
}

donk::running_proc range(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/range");
}

donk::running_proc ref(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/ref");
}

donk::running_proc regex_(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/regex");
}

donk::running_proc replacetext(donk::proc_ctxt_t& ctxt,
                               donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/replacetext");
}

donk::running_proc replacetextEx(donk::proc_ctxt_t& ctxt,
                                 donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/replacetextEx");
}

donk::running_proc replacetextEx_char(donk::proc_ctxt_t& ctxt,
                                      donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/replacetextEx_char");
}

donk::running_proc replacetext_char(donk::proc_ctxt_t& ctxt,
                                    donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/replacetext_char");
}

donk::running_proc rgb(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/rgb");
}

donk::running_proc rgb2num(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/rgb2num");
}

donk::running_proc roll(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/roll");
}

donk::running_proc round(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/round");
}

donk::running_proc run(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/run");
}

donk::running_proc sha1(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/sha1");
}

donk::running_proc shell(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/shell");
}

donk::running_proc shutdown(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/shutdown");
}

donk::running_proc sin(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/sin");
}

donk::running_proc sleep(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/sleep");
}

donk::running_proc sorttext(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/sorttext");
}

donk::running_proc sorttextEx(donk::proc_ctxt_t& ctxt,
                              donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/sorttextEx");
}

donk::running_proc sound_(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/sound");
}

donk::running_proc spantext(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/spantext");
}

donk::running_proc spantext_char(donk::proc_ctxt_t& ctxt,
                                 donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/spantext_char");
}

donk::running_proc splicetext(donk::proc_ctxt_t& ctxt,
                              donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/splicetext");
}

donk::running_proc splicetext_char(donk::proc_ctxt_t& ctxt,
                                   donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/splicetext_char");
}

donk::running_proc splittext(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/splittext");
}

donk::running_proc splittext_char(donk::proc_ctxt_t& ctxt,
                                  donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/splittext_char");
}

donk::running_proc sqrt(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/sqrt");
}

donk::running_proc startup(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/startup");
}

donk::running_proc stat(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/stat");
}

donk::running_proc statpanel(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/statpanel");
}

donk::running_proc step(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/step");
}

donk::running_proc step_away(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/step_away");
}

donk::running_proc step_rand(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/step_rand");
}

donk::running_proc step_to(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/step_to");
}

donk::running_proc step_towards(donk::proc_ctxt_t& ctxt,
                                donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/step_towards");
}

donk::running_proc tan(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/tan");
}

donk::running_proc text(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/text");
}

donk::running_proc text2ascii(donk::proc_ctxt_t& ctxt,
                              donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/text2ascii");
}

donk::running_proc text2ascii_char(donk::proc_ctxt_t& ctxt,
                                   donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/text2ascii_char");
}

donk::running_proc text2file(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/text2file");
}

donk::running_proc text2num(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/text2num");
}

donk::running_proc text2path(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/text2path");
}

donk::running_proc time2text(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/time2text");
}

donk::running_proc turn(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/turn");
}

donk::running_proc typesof(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/typesof");
}

donk::running_proc uppertext(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/uppertext");
}

donk::running_proc url_decode(donk::proc_ctxt_t& ctxt,
                              donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/url_decode");
}

donk::running_proc url_encode(donk::proc_ctxt_t& ctxt,
                              donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/url_encode");
}

donk::running_proc view(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/view");
}

donk::running_proc viewers(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/viewers");
}

donk::running_proc walk(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/walk");
}

donk::running_proc walk_away(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/walk_away");
}

donk::running_proc walk_rand(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/walk_rand");
}

donk::running_proc walk_to(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/walk_to");
}

donk::running_proc walk_towards(donk::proc_ctxt_t& ctxt,
                                donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/walk_towards");
}

donk::running_proc winclone(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/winclone");
}

donk::running_proc winexists(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/winexists");
}

donk::running_proc winget(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/winget");
}

donk::running_proc winset(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/winset");
}

donk::running_proc winshow(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/proc/winshow");
}

void Register(donk::iota_t& iota) {
  iota.RegisterProc("CRASH", donk::api::CRASH);
  iota.RegisterProc("REGEX_QUOTE", donk::api::REGEX_QUOTE);
  iota.RegisterProc("REGEX_QUOTE_REPLACEMENT",
                    donk::api::REGEX_QUOTE_REPLACEMENT);
  iota.RegisterProc("_dm_db_close", donk::api::_dm_db_close);
  iota.RegisterProc("_dm_db_columns", donk::api::_dm_db_columns);
  iota.RegisterProc("_dm_db_connect", donk::api::_dm_db_connect);
  iota.RegisterProc("_dm_db_error_msg", donk::api::_dm_db_error_msg);
  iota.RegisterProc("_dm_db_execute", donk::api::_dm_db_execute);
  iota.RegisterProc("_dm_db_is_connected", donk::api::_dm_db_is_connected);
  iota.RegisterProc("_dm_db_new_con", donk::api::_dm_db_new_con);
  iota.RegisterProc("_dm_db_new_query", donk::api::_dm_db_new_query);
  iota.RegisterProc("_dm_db_next_row", donk::api::_dm_db_next_row);
  iota.RegisterProc("_dm_db_quote", donk::api::_dm_db_quote);
  iota.RegisterProc("_dm_db_row_count", donk::api::_dm_db_row_count);
  iota.RegisterProc("_dm_db_rows_affected", donk::api::_dm_db_rows_affected);
  iota.RegisterProc("abs", donk::api::abs);
  iota.RegisterProc("addtext", donk::api::addtext);
  iota.RegisterProc("alert", donk::api::alert);
  iota.RegisterProc("animate", donk::api::animate);
  iota.RegisterProc("arccos", donk::api::arccos);
  iota.RegisterProc("arcsin", donk::api::arcsin);
  iota.RegisterProc("arctan", donk::api::arctan);
  iota.RegisterProc("arglist", donk::api::arglist);
  iota.RegisterProc("ascii2text", donk::api::ascii2text);
  iota.RegisterProc("block", donk::api::block);
  iota.RegisterProc("bounds", donk::api::bounds);
  iota.RegisterProc("bounds_dist", donk::api::bounds_dist);
  iota.RegisterProc("browse", donk::api::browse);
  iota.RegisterProc("browse_rsc", donk::api::browse_rsc);
  iota.RegisterProc("ckey", donk::api::ckey);
  iota.RegisterProc("ckeyEx", donk::api::ckeyEx);
  iota.RegisterProc("clamp", donk::api::clamp);
  iota.RegisterProc("cmptext", donk::api::cmptext);
  iota.RegisterProc("cmptextEx", donk::api::cmptextEx);
  iota.RegisterProc("copytext", donk::api::copytext);
  iota.RegisterProc("copytext_char", donk::api::copytext_char);
  iota.RegisterProc("cos", donk::api::cos);
  iota.RegisterProc("fcopy", donk::api::fcopy);
  iota.RegisterProc("fcopy_rsc", donk::api::fcopy_rsc);
  iota.RegisterProc("fdel", donk::api::fdel);
  iota.RegisterProc("fexists", donk::api::fexists);
  iota.RegisterProc("file", donk::api::file);
  iota.RegisterProc("file2text", donk::api::file2text);
  iota.RegisterProc("filter", donk::api::filter);
  iota.RegisterProc("findlasttext", donk::api::findlasttext);
  iota.RegisterProc("findlasttextEx", donk::api::findlasttextEx);
  iota.RegisterProc("findlasttextEx_char", donk::api::findlasttextEx_char);
  iota.RegisterProc("findlasttext_char", donk::api::findlasttext_char);
  iota.RegisterProc("findtext", donk::api::findtext);
  iota.RegisterProc("findtextEx", donk::api::findtextEx);
  iota.RegisterProc("findtextEx_char", donk::api::findtextEx_char);
  iota.RegisterProc("findtext_char", donk::api::findtext_char);
  iota.RegisterProc("flick", donk::api::flick);
  iota.RegisterProc("flist", donk::api::flist);
  iota.RegisterProc("ftp", donk::api::ftp);
  iota.RegisterProc("generator", donk::api::generator);
  iota.RegisterProc("get_dir", donk::api::get_dir);
  iota.RegisterProc("get_dist", donk::api::get_dist);
  iota.RegisterProc("get_step", donk::api::get_step);
  iota.RegisterProc("get_step_away", donk::api::get_step_away);
  iota.RegisterProc("get_step_rand", donk::api::get_step_rand);
  iota.RegisterProc("get_step_to", donk::api::get_step_to);
  iota.RegisterProc("get_step_towards", donk::api::get_step_towards);
  iota.RegisterProc("gradient", donk::api::gradient);
  iota.RegisterProc("hascall", donk::api::hascall);
  iota.RegisterProc("hearers", donk::api::hearers);
  iota.RegisterProc("html_decode", donk::api::html_decode);
  iota.RegisterProc("html_encode", donk::api::html_encode);
  iota.RegisterProc("icon", donk::api::icon_);
  iota.RegisterProc("icon_states", donk::api::icon_states);
  iota.RegisterProc("image", donk::api::image_);
  iota.RegisterProc("initial", donk::api::initial);
  iota.RegisterProc("input", donk::api::input);
  iota.RegisterProc("isarea", donk::api::isarea);
  iota.RegisterProc("isfile", donk::api::isfile);
  iota.RegisterProc("isicon", donk::api::isicon);
  iota.RegisterProc("islist", donk::api::islist);
  iota.RegisterProc("isloc", donk::api::isloc);
  iota.RegisterProc("ismob", donk::api::ismob);
  iota.RegisterProc("ismovable", donk::api::ismovable);
  iota.RegisterProc("isnull", donk::api::isnull);
  iota.RegisterProc("isnum", donk::api::isnum);
  iota.RegisterProc("isobj", donk::api::isobj);
  iota.RegisterProc("ispath", donk::api::ispath);
  iota.RegisterProc("issaved", donk::api::issaved);
  iota.RegisterProc("istext", donk::api::istext);
  iota.RegisterProc("isturf", donk::api::isturf);
  iota.RegisterProc("istype", donk::api::istype);
  iota.RegisterProc("jointext", donk::api::jointext);
  iota.RegisterProc("json_decode", donk::api::json_decode);
  iota.RegisterProc("json_encode", donk::api::json_encode);
  iota.RegisterProc("length", donk::api::length);
  iota.RegisterProc("length_char", donk::api::length_char);
  iota.RegisterProc("lentext", donk::api::lentext);
  iota.RegisterProc("link", donk::api::link);
  iota.RegisterProc("list", donk::api::list_);
  iota.RegisterProc("list2params", donk::api::list2params);
  iota.RegisterProc("load_resource", donk::api::load_resource);
  iota.RegisterProc("locate", donk::api::locate);
  iota.RegisterProc("log", donk::api::log);
  iota.RegisterProc("lowertext", donk::api::lowertext);
  iota.RegisterProc("matrix", donk::api::matrix_);
  iota.RegisterProc("max", donk::api::max);
  iota.RegisterProc("md5", donk::api::md5);
  iota.RegisterProc("min", donk::api::min);
  iota.RegisterProc("missile", donk::api::missile);
  iota.RegisterProc("newlist", donk::api::newlist);
  iota.RegisterProc("nonspantext", donk::api::nonspantext);
  iota.RegisterProc("nonspantext_char", donk::api::nonspantext_char);
  iota.RegisterProc("num2text", donk::api::num2text);
  iota.RegisterProc("obounds", donk::api::obounds);
  iota.RegisterProc("ohearers", donk::api::ohearers);
  iota.RegisterProc("orange", donk::api::orange);
  iota.RegisterProc("output", donk::api::output);
  iota.RegisterProc("oview", donk::api::oview);
  iota.RegisterProc("oviewers", donk::api::oviewers);
  iota.RegisterProc("params2list", donk::api::params2list);
  iota.RegisterProc("pick", donk::api::pick);
  iota.RegisterProc("prob", donk::api::prob);
  iota.RegisterProc("rand", donk::api::rand);
  iota.RegisterProc("rand_seed", donk::api::rand_seed);
  iota.RegisterProc("range", donk::api::range);
  iota.RegisterProc("ref", donk::api::ref);
  iota.RegisterProc("regex", donk::api::regex_);
  iota.RegisterProc("replacetext", donk::api::replacetext);
  iota.RegisterProc("replacetextEx", donk::api::replacetextEx);
  iota.RegisterProc("replacetextEx_char", donk::api::replacetextEx_char);
  iota.RegisterProc("replacetext_char", donk::api::replacetext_char);
  iota.RegisterProc("rgb", donk::api::rgb);
  iota.RegisterProc("rgb2num", donk::api::rgb2num);
  iota.RegisterProc("roll", donk::api::roll);
  iota.RegisterProc("round", donk::api::round);
  iota.RegisterProc("run", donk::api::run);
  iota.RegisterProc("sha1", donk::api::sha1);
  iota.RegisterProc("shell", donk::api::shell);
  iota.RegisterProc("shutdown", donk::api::shutdown);
  iota.RegisterProc("sin", donk::api::sin);
  iota.RegisterProc("sleep", donk::api::sleep);
  iota.RegisterProc("sorttext", donk::api::sorttext);
  iota.RegisterProc("sorttextEx", donk::api::sorttextEx);
  iota.RegisterProc("sound", donk::api::sound_);
  iota.RegisterProc("spantext", donk::api::spantext);
  iota.RegisterProc("spantext_char", donk::api::spantext_char);
  iota.RegisterProc("splicetext", donk::api::splicetext);
  iota.RegisterProc("splicetext_char", donk::api::splicetext_char);
  iota.RegisterProc("splittext", donk::api::splittext);
  iota.RegisterProc("splittext_char", donk::api::splittext_char);
  iota.RegisterProc("sqrt", donk::api::sqrt);
  iota.RegisterProc("startup", donk::api::startup);
  iota.RegisterProc("stat", donk::api::stat);
  iota.RegisterProc("statpanel", donk::api::statpanel);
  iota.RegisterProc("step", donk::api::step);
  iota.RegisterProc("step_away", donk::api::step_away);
  iota.RegisterProc("step_rand", donk::api::step_rand);
  iota.RegisterProc("step_to", donk::api::step_to);
  iota.RegisterProc("step_towards", donk::api::step_towards);
  iota.RegisterProc("tan", donk::api::tan);
  iota.RegisterProc("text", donk::api::text);
  iota.RegisterProc("text2ascii", donk::api::text2ascii);
  iota.RegisterProc("text2ascii_char", donk::api::text2ascii_char);
  iota.RegisterProc("text2file", donk::api::text2file);
  iota.RegisterProc("text2num", donk::api::text2num);
  iota.RegisterProc("text2path", donk::api::text2path);
  iota.RegisterProc("time2text", donk::api::time2text);
  iota.RegisterProc("turn", donk::api::turn);
  iota.RegisterProc("typesof", donk::api::typesof);
  iota.RegisterProc("uppertext", donk::api::uppertext);
  iota.RegisterProc("url_decode", donk::api::url_decode);
  iota.RegisterProc("url_encode", donk::api::url_encode);
  iota.RegisterProc("view", donk::api::view);
  iota.RegisterProc("viewers", donk::api::viewers);
  iota.RegisterProc("walk", donk::api::walk);
  iota.RegisterProc("walk_away", donk::api::walk_away);
  iota.RegisterProc("walk_rand", donk::api::walk_rand);
  iota.RegisterProc("walk_to", donk::api::walk_to);
  iota.RegisterProc("walk_towards", donk::api::walk_towards);
  iota.RegisterProc("winclone", donk::api::winclone);
  iota.RegisterProc("winexists", donk::api::winexists);
  iota.RegisterProc("winget", donk::api::winget);
  iota.RegisterProc("winset", donk::api::winset);
  iota.RegisterProc("winshow", donk::api::winshow);
  donk::var_t donk_value_var__AREA_LAYER = 1;
  iota.RegisterVar("AREA_LAYER", donk_value_var__AREA_LAYER);
  donk::var_t donk_value_var__BACKGROUND_LAYER = 20000;
  iota.RegisterVar("BACKGROUND_LAYER", donk_value_var__BACKGROUND_LAYER);
  donk::var_t donk_value_var__BLEND_ADD = 2;
  iota.RegisterVar("BLEND_ADD", donk_value_var__BLEND_ADD);
  donk::var_t donk_value_var__BLEND_DEFAULT = 0;
  iota.RegisterVar("BLEND_DEFAULT", donk_value_var__BLEND_DEFAULT);
  donk::var_t donk_value_var__BLEND_INSET_OVERLAY = 5;
  iota.RegisterVar("BLEND_INSET_OVERLAY", donk_value_var__BLEND_INSET_OVERLAY);
  donk::var_t donk_value_var__BLEND_MULTIPLY = 4;
  iota.RegisterVar("BLEND_MULTIPLY", donk_value_var__BLEND_MULTIPLY);
  donk::var_t donk_value_var__BLEND_OVERLAY = 1;
  iota.RegisterVar("BLEND_OVERLAY", donk_value_var__BLEND_OVERLAY);
  donk::var_t donk_value_var__BLEND_SUBTRACT = 3;
  iota.RegisterVar("BLEND_SUBTRACT", donk_value_var__BLEND_SUBTRACT);
  donk::var_t donk_value_var__BLIND = 1;
  iota.RegisterVar("BLIND", donk_value_var__BLIND);
  donk::var_t donk_value_var__DOWN = 32;
  iota.RegisterVar("DOWN", donk_value_var__DOWN);
  donk::var_t donk_value_var__EAST = 4;
  iota.RegisterVar("EAST", donk_value_var__EAST);
  donk::var_t donk_value_var__EDGE_PERSPECTIVE = 2;
  iota.RegisterVar("EDGE_PERSPECTIVE", donk_value_var__EDGE_PERSPECTIVE);
  donk::var_t donk_value_var__EFFECTS_LAYER = 5000;
  iota.RegisterVar("EFFECTS_LAYER", donk_value_var__EFFECTS_LAYER);
  donk::var_t donk_value_var__EYE_PERSPECTIVE = 1;
  iota.RegisterVar("EYE_PERSPECTIVE", donk_value_var__EYE_PERSPECTIVE);
  donk::var_t donk_value_var__FALSE = 0;
  iota.RegisterVar("FALSE", donk_value_var__FALSE);
  donk::var_t donk_value_var__FEMALE = std::string("female");
  iota.RegisterVar("FEMALE", donk_value_var__FEMALE);
  donk::var_t donk_value_var__FILTER_COLOR_HCY = 3;
  iota.RegisterVar("FILTER_COLOR_HCY", donk_value_var__FILTER_COLOR_HCY);
  donk::var_t donk_value_var__FILTER_COLOR_HSL = 2;
  iota.RegisterVar("FILTER_COLOR_HSL", donk_value_var__FILTER_COLOR_HSL);
  donk::var_t donk_value_var__FILTER_COLOR_HSV = 1;
  iota.RegisterVar("FILTER_COLOR_HSV", donk_value_var__FILTER_COLOR_HSV);
  donk::var_t donk_value_var__FILTER_COLOR_RGB = 0;
  iota.RegisterVar("FILTER_COLOR_RGB", donk_value_var__FILTER_COLOR_RGB);
  donk::var_t donk_value_var__FILTER_OVERLAY = 1;
  iota.RegisterVar("FILTER_OVERLAY", donk_value_var__FILTER_OVERLAY);
  donk::var_t donk_value_var__FILTER_UNDERLAY = 2;
  iota.RegisterVar("FILTER_UNDERLAY", donk_value_var__FILTER_UNDERLAY);
  donk::var_t donk_value_var__FLOAT_LAYER = -1;
  iota.RegisterVar("FLOAT_LAYER", donk_value_var__FLOAT_LAYER);
  donk::var_t donk_value_var__FLOAT_PLANE = -32767;
  iota.RegisterVar("FLOAT_PLANE", donk_value_var__FLOAT_PLANE);
  donk::var_t donk_value_var__FLY_LAYER = 5;
  iota.RegisterVar("FLY_LAYER", donk_value_var__FLY_LAYER);
  donk::var_t donk_value_var__ISOMETRIC_MAP = 1;
  iota.RegisterVar("ISOMETRIC_MAP", donk_value_var__ISOMETRIC_MAP);
  donk::var_t donk_value_var__LEGACY_MOVEMENT_MODE = 0;
  iota.RegisterVar("LEGACY_MOVEMENT_MODE",
                   donk_value_var__LEGACY_MOVEMENT_MODE);
  donk::var_t donk_value_var__MALE = std::string("male");
  iota.RegisterVar("MALE", donk_value_var__MALE);
  donk::var_t donk_value_var__MASK_INVERSE = 1;
  iota.RegisterVar("MASK_INVERSE", donk_value_var__MASK_INVERSE);
  donk::var_t donk_value_var__MASK_SWAP = 2;
  iota.RegisterVar("MASK_SWAP", donk_value_var__MASK_SWAP);
  donk::var_t donk_value_var__MOB_LAYER = 4;
  iota.RegisterVar("MOB_LAYER", donk_value_var__MOB_LAYER);
  donk::var_t donk_value_var__MOB_PERSPECTIVE = 0;
  iota.RegisterVar("MOB_PERSPECTIVE", donk_value_var__MOB_PERSPECTIVE);
  donk::var_t donk_value_var__MOUSE_ACTIVE_POINTER = 1;
  iota.RegisterVar("MOUSE_ACTIVE_POINTER",
                   donk_value_var__MOUSE_ACTIVE_POINTER);
  donk::var_t donk_value_var__MOUSE_ALT_KEY = 32;
  iota.RegisterVar("MOUSE_ALT_KEY", donk_value_var__MOUSE_ALT_KEY);
  donk::var_t donk_value_var__MOUSE_ARROW_POINTER = 5;
  iota.RegisterVar("MOUSE_ARROW_POINTER", donk_value_var__MOUSE_ARROW_POINTER);
  donk::var_t donk_value_var__MOUSE_CROSSHAIRS_POINTER = 6;
  iota.RegisterVar("MOUSE_CROSSHAIRS_POINTER",
                   donk_value_var__MOUSE_CROSSHAIRS_POINTER);
  donk::var_t donk_value_var__MOUSE_CTRL_KEY = 8;
  iota.RegisterVar("MOUSE_CTRL_KEY", donk_value_var__MOUSE_CTRL_KEY);
  donk::var_t donk_value_var__MOUSE_DRAG_POINTER = 3;
  iota.RegisterVar("MOUSE_DRAG_POINTER", donk_value_var__MOUSE_DRAG_POINTER);
  donk::var_t donk_value_var__MOUSE_DROP_POINTER = 4;
  iota.RegisterVar("MOUSE_DROP_POINTER", donk_value_var__MOUSE_DROP_POINTER);
  donk::var_t donk_value_var__MOUSE_HAND_POINTER = 7;
  iota.RegisterVar("MOUSE_HAND_POINTER", donk_value_var__MOUSE_HAND_POINTER);
  donk::var_t donk_value_var__MOUSE_INACTIVE_POINTER = 0;
  iota.RegisterVar("MOUSE_INACTIVE_POINTER",
                   donk_value_var__MOUSE_INACTIVE_POINTER);
  donk::var_t donk_value_var__MOUSE_LEFT_BUTTON = 1;
  iota.RegisterVar("MOUSE_LEFT_BUTTON", donk_value_var__MOUSE_LEFT_BUTTON);
  donk::var_t donk_value_var__MOUSE_MIDDLE_BUTTON = 4;
  iota.RegisterVar("MOUSE_MIDDLE_BUTTON", donk_value_var__MOUSE_MIDDLE_BUTTON);
  donk::var_t donk_value_var__MOUSE_RIGHT_BUTTON = 2;
  iota.RegisterVar("MOUSE_RIGHT_BUTTON", donk_value_var__MOUSE_RIGHT_BUTTON);
  donk::var_t donk_value_var__MOUSE_SHIFT_KEY = 16;
  iota.RegisterVar("MOUSE_SHIFT_KEY", donk_value_var__MOUSE_SHIFT_KEY);
  donk::var_t donk_value_var__MS_WINDOWS = std::string("MS Windows");
  iota.RegisterVar("MS_WINDOWS", donk_value_var__MS_WINDOWS);
  donk::var_t donk_value_var__NEUTER = std::string("neuter");
  iota.RegisterVar("NEUTER", donk_value_var__NEUTER);
  donk::var_t donk_value_var__NORTH = 1;
  iota.RegisterVar("NORTH", donk_value_var__NORTH);
  donk::var_t donk_value_var__NORTHEAST = 5;
  iota.RegisterVar("NORTHEAST", donk_value_var__NORTHEAST);
  donk::var_t donk_value_var__NORTHWEST = 9;
  iota.RegisterVar("NORTHWEST", donk_value_var__NORTHWEST);
  donk::var_t donk_value_var__OBJ_LAYER = 3;
  iota.RegisterVar("OBJ_LAYER", donk_value_var__OBJ_LAYER);
  donk::var_t donk_value_var__OUTLINE_SHARP = 1;
  iota.RegisterVar("OUTLINE_SHARP", donk_value_var__OUTLINE_SHARP);
  donk::var_t donk_value_var__OUTLINE_SQUARE = 2;
  iota.RegisterVar("OUTLINE_SQUARE", donk_value_var__OUTLINE_SQUARE);
  donk::var_t donk_value_var__PIXEL_MOVEMENT_MODE = 2;
  iota.RegisterVar("PIXEL_MOVEMENT_MODE", donk_value_var__PIXEL_MOVEMENT_MODE);
  donk::var_t donk_value_var__PLURAL = std::string("plural");
  iota.RegisterVar("PLURAL", donk_value_var__PLURAL);
  donk::var_t donk_value_var__SEE_BLACKNESS = 1024;
  iota.RegisterVar("SEE_BLACKNESS", donk_value_var__SEE_BLACKNESS);
  donk::var_t donk_value_var__SEE_INFRA = 64;
  iota.RegisterVar("SEE_INFRA", donk_value_var__SEE_INFRA);
  donk::var_t donk_value_var__SEE_MOBS = 4;
  iota.RegisterVar("SEE_MOBS", donk_value_var__SEE_MOBS);
  donk::var_t donk_value_var__SEE_OBJS = 8;
  iota.RegisterVar("SEE_OBJS", donk_value_var__SEE_OBJS);
  donk::var_t donk_value_var__SEE_PIXELS = 256;
  iota.RegisterVar("SEE_PIXELS", donk_value_var__SEE_PIXELS);
  donk::var_t donk_value_var__SEE_SELF = 32;
  iota.RegisterVar("SEE_SELF", donk_value_var__SEE_SELF);
  donk::var_t donk_value_var__SEE_THRU = 512;
  iota.RegisterVar("SEE_THRU", donk_value_var__SEE_THRU);
  donk::var_t donk_value_var__SEE_TURFS = 16;
  iota.RegisterVar("SEE_TURFS", donk_value_var__SEE_TURFS);
  donk::var_t donk_value_var__SIDE_MAP = 2;
  iota.RegisterVar("SIDE_MAP", donk_value_var__SIDE_MAP);
  donk::var_t donk_value_var__SOUND_MUTE = 1;
  iota.RegisterVar("SOUND_MUTE", donk_value_var__SOUND_MUTE);
  donk::var_t donk_value_var__SOUND_PAUSED = 2;
  iota.RegisterVar("SOUND_PAUSED", donk_value_var__SOUND_PAUSED);
  donk::var_t donk_value_var__SOUND_STREAM = 4;
  iota.RegisterVar("SOUND_STREAM", donk_value_var__SOUND_STREAM);
  donk::var_t donk_value_var__SOUND_UPDATE = 16;
  iota.RegisterVar("SOUND_UPDATE", donk_value_var__SOUND_UPDATE);
  donk::var_t donk_value_var__SOUTH = 2;
  iota.RegisterVar("SOUTH", donk_value_var__SOUTH);
  donk::var_t donk_value_var__SOUTHEAST = 6;
  iota.RegisterVar("SOUTHEAST", donk_value_var__SOUTHEAST);
  donk::var_t donk_value_var__SOUTHWEST = 10;
  iota.RegisterVar("SOUTHWEST", donk_value_var__SOUTHWEST);
  donk::var_t donk_value_var__TILED_ICON_MAP = 32768;
  iota.RegisterVar("TILED_ICON_MAP", donk_value_var__TILED_ICON_MAP);
  donk::var_t donk_value_var__TILE_MOVEMENT_MODE = 1;
  iota.RegisterVar("TILE_MOVEMENT_MODE", donk_value_var__TILE_MOVEMENT_MODE);
  donk::var_t donk_value_var__TOPDOWN_LAYER = 10000;
  iota.RegisterVar("TOPDOWN_LAYER", donk_value_var__TOPDOWN_LAYER);
  donk::var_t donk_value_var__TOPDOWN_MAP = 0;
  iota.RegisterVar("TOPDOWN_MAP", donk_value_var__TOPDOWN_MAP);
  donk::var_t donk_value_var__TRUE = 1;
  iota.RegisterVar("TRUE", donk_value_var__TRUE);
  donk::var_t donk_value_var__TURF_LAYER = 2;
  iota.RegisterVar("TURF_LAYER", donk_value_var__TURF_LAYER);
  donk::var_t donk_value_var__UNIX = std::string("UNIX");
  iota.RegisterVar("UNIX", donk_value_var__UNIX);
  donk::var_t donk_value_var__UP = 16;
  iota.RegisterVar("UP", donk_value_var__UP);
  donk::var_t donk_value_var__WAVE_BOUNDED = 2;
  iota.RegisterVar("WAVE_BOUNDED", donk_value_var__WAVE_BOUNDED);
  donk::var_t donk_value_var__WAVE_SIDEWAYS = 1;
  iota.RegisterVar("WAVE_SIDEWAYS", donk_value_var__WAVE_SIDEWAYS);
  donk::var_t donk_value_var__WEST = 8;
  iota.RegisterVar("WEST", donk_value_var__WEST);
  iota.RegisterVar("vars");
  iota.RegisterVar("world");
}

}  // namespace donk::api