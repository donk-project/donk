// Generated by Donk Transpiler. Changes may be overwritten.
// Template:    transformer_definition_cc.tmpl
// Filename:    datum/atom.cc
#include "donk/api/datum/atom.h"

#include <string>

#include "donk/api/datum.h"
#include "donk/core/iota.h"
#include "donk/core/path.h"
#include "donk/core/procs.h"
#include "donk/core/vars.h"

namespace donk::api::datum::atom {
atom_coretype::atom_coretype(donk::path_t path)
    : donk::iota_t(path), donk::api::datum::datum_coretype(path) {
  InternalCoreRegister();
}

donk::running_proc Click(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/datum/atom/proc/Click");
}

donk::running_proc Cross(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/datum/atom/proc/Cross");
}

donk::running_proc Crossed(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/datum/atom/proc/Crossed");
}

donk::running_proc DblClick(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/datum/atom/proc/DblClick");
}

donk::running_proc Enter(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/datum/atom/proc/Enter");
}

donk::running_proc Entered(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/datum/atom/proc/Entered");
}

donk::running_proc Exit(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/datum/atom/proc/Exit");
}

donk::running_proc Exited(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/datum/atom/proc/Exited");
}

donk::running_proc MouseDown(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/datum/atom/proc/MouseDown");
}

donk::running_proc MouseDrag(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/datum/atom/proc/MouseDrag");
}

donk::running_proc MouseDrop(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/datum/atom/proc/MouseDrop");
}

donk::running_proc MouseEntered(donk::proc_ctxt_t& ctxt,
                                donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/datum/atom/proc/MouseEntered");
}

donk::running_proc MouseExited(donk::proc_ctxt_t& ctxt,
                               donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/datum/atom/proc/MouseExited");
}

donk::running_proc MouseMove(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/datum/atom/proc/MouseMove");
}

donk::running_proc MouseUp(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/datum/atom/proc/MouseUp");
}

donk::running_proc MouseWheel(donk::proc_ctxt_t& ctxt,
                              donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/datum/atom/proc/MouseWheel");
}

donk::running_proc New(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/datum/atom/proc/New");
}

donk::running_proc Stat(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/datum/atom/proc/Stat");
}

donk::running_proc Uncross(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/datum/atom/proc/Uncross");
}

donk::running_proc Uncrossed(donk::proc_ctxt_t& ctxt, donk::proc_args_t& args) {
  co_yield ctxt.Unimplemented("/datum/atom/proc/Uncrossed");
}

void atom_coretype::InternalCoreRegister() {
  RegisterProc("Click", donk::api::datum::atom::Click);
  RegisterProc("Cross", donk::api::datum::atom::Cross);
  RegisterProc("Crossed", donk::api::datum::atom::Crossed);
  RegisterProc("DblClick", donk::api::datum::atom::DblClick);
  RegisterProc("Enter", donk::api::datum::atom::Enter);
  RegisterProc("Entered", donk::api::datum::atom::Entered);
  RegisterProc("Exit", donk::api::datum::atom::Exit);
  RegisterProc("Exited", donk::api::datum::atom::Exited);
  RegisterProc("MouseDown", donk::api::datum::atom::MouseDown);
  RegisterProc("MouseDrag", donk::api::datum::atom::MouseDrag);
  RegisterProc("MouseDrop", donk::api::datum::atom::MouseDrop);
  RegisterProc("MouseEntered", donk::api::datum::atom::MouseEntered);
  RegisterProc("MouseExited", donk::api::datum::atom::MouseExited);
  RegisterProc("MouseMove", donk::api::datum::atom::MouseMove);
  RegisterProc("MouseUp", donk::api::datum::atom::MouseUp);
  RegisterProc("MouseWheel", donk::api::datum::atom::MouseWheel);
  RegisterProc("New", donk::api::datum::atom::New);
  RegisterProc("Stat", donk::api::datum::atom::Stat);
  RegisterProc("Uncross", donk::api::datum::atom::Uncross);
  RegisterProc("Uncrossed", donk::api::datum::atom::Uncrossed);
  donk::var_t donk_value_var__alpha = 255;
  RegisterVar("alpha", donk_value_var__alpha);
  RegisterVar("appearance");
  donk::var_t donk_value_var__appearance_flags = 0;
  RegisterVar("appearance_flags", donk_value_var__appearance_flags);
  donk::var_t donk_value_var__blend_mode = 0;
  RegisterVar("blend_mode", donk_value_var__blend_mode);
  RegisterVar("bounds");
  RegisterVar("color");
  RegisterVar("contents");
  donk::var_t donk_value_var__density = 0;
  RegisterVar("density", donk_value_var__density);
  RegisterVar("desc");
  donk::var_t donk_value_var__dir = 2;
  RegisterVar("dir", donk_value_var__dir);
  RegisterVar("filters");
  donk::var_t donk_value_var__gender = std::string("neuter");
  RegisterVar("gender", donk_value_var__gender);
  RegisterVar("icon");
  RegisterVar("icon_state");
  donk::var_t donk_value_var__infra_luminosity = 0;
  RegisterVar("infra_luminosity", donk_value_var__infra_luminosity);
  donk::var_t donk_value_var__invisibility = 0;
  RegisterVar("invisibility", donk_value_var__invisibility);
  donk::var_t donk_value_var__layer = 1;
  RegisterVar("layer", donk_value_var__layer);
  RegisterVar("loc");
  donk::var_t donk_value_var__luminosity = 0;
  RegisterVar("luminosity", donk_value_var__luminosity);
  RegisterVar("maptext");
  donk::var_t donk_value_var__maptext_height = 32;
  RegisterVar("maptext_height", donk_value_var__maptext_height);
  donk::var_t donk_value_var__maptext_width = 32;
  RegisterVar("maptext_width", donk_value_var__maptext_width);
  donk::var_t donk_value_var__maptext_x = 0;
  RegisterVar("maptext_x", donk_value_var__maptext_x);
  donk::var_t donk_value_var__maptext_y = 0;
  RegisterVar("maptext_y", donk_value_var__maptext_y);
  donk::var_t donk_value_var__mouse_drag_pointer = 0;
  RegisterVar("mouse_drag_pointer", donk_value_var__mouse_drag_pointer);
  donk::var_t donk_value_var__mouse_drop_pointer = 1;
  RegisterVar("mouse_drop_pointer", donk_value_var__mouse_drop_pointer);
  donk::var_t donk_value_var__mouse_drop_zone = 0;
  RegisterVar("mouse_drop_zone", donk_value_var__mouse_drop_zone);
  donk::var_t donk_value_var__mouse_opacity = 1;
  RegisterVar("mouse_opacity", donk_value_var__mouse_opacity);
  donk::var_t donk_value_var__mouse_over_pointer = 0;
  RegisterVar("mouse_over_pointer", donk_value_var__mouse_over_pointer);
  RegisterVar("name");
  donk::var_t donk_value_var__opacity = 0;
  RegisterVar("opacity", donk_value_var__opacity);
  RegisterVar("overlays");
  donk::var_t donk_value_var__parent_type = donk::prefab_t("/datum");
  RegisterVar("parent_type", donk_value_var__parent_type);
  donk::var_t donk_value_var__pixel_w = 0;
  RegisterVar("pixel_w", donk_value_var__pixel_w);
  donk::var_t donk_value_var__pixel_x = 0;
  RegisterVar("pixel_x", donk_value_var__pixel_x);
  donk::var_t donk_value_var__pixel_y = 0;
  RegisterVar("pixel_y", donk_value_var__pixel_y);
  donk::var_t donk_value_var__pixel_z = 0;
  RegisterVar("pixel_z", donk_value_var__pixel_z);
  donk::var_t donk_value_var__plane = 0;
  RegisterVar("plane", donk_value_var__plane);
  RegisterVar("render_source");
  RegisterVar("render_target");
  RegisterVar("suffix");
  RegisterVar("text");
  RegisterVar("transform");
  RegisterVar("underlays");
  RegisterVar("verbs");
  RegisterVar("vis_flags");
  RegisterVar("x");
  RegisterVar("y");
  RegisterVar("z");
}

}  // namespace donk::api::datum::atom